name: 'Build and deploy - dev'


on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  upload-docker-dev:
    runs-on: ubuntu-latest
    name: Upload docker dev images
    env:
      IMAGE_TAG: ${{ github.run_number }}
    outputs:
      image_tag: ${{ env.IMAGE_TAG }}
    steps: 
      - name: Check out code
        uses: actions/checkout@v2

      - uses: docker/setup-buildx-action@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and upload image
        uses: docker/build-push-action@v2
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: Dockerfile.dart_service
          tags: ${{ steps.login-ecr.outputs.registry }}/code_service:${{ env.IMAGE_TAG }}
          push: true

  deploy:
    needs: [upload-docker-dev]
    runs-on: ubuntu-latest
    env:
      cache_id: deploy-dev
      flutter_version: 3.3.2
    steps:
      - uses: actions/checkout@v3

      # - uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/.cargo/
      #       ./target/
      #     key: ${{ env.cache_id }}-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ env.RUSTC_HASH }}
      # - name: Install latest rust
      #   uses: actions-rs/toolchain@v1
      #   with:
      #       toolchain: stable
      #       override: true
      #
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # - name: Add target
      #   run: rustup target add aarch64-unknown-linux-gnu
      #
      # - name: Install cross
      #   run: cargo install cross
      #
      # - name: Build target
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: xtask
      #     args: build-lambda --use-cross --target aarch64-unknown-linux-gnu

      - name: Install dependencies
        run: yarn

      - name: Synth stack
        env:
          CODE_SERVICE_TAG: ${{ needs.upload-docker-dev.outputs.image_tag}}
          AWS_REGION : ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT : ${{ secrets.AWS_ACCOUNT }}
        run: yarn cdk synth

      - name: Deploy stack
        env:
          CODE_SERVICE_TAG: ${{ needs.upload-docker-dev.outputs.image_tag}}
          AWS_REGION : ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT : ${{ secrets.AWS_ACCOUNT }}
        run: yarn cdk deploy --all --require-approval never
