/*
 * just-code-dev
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-10 06:01:08UTC
 *
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::pin::Pin;
use std::rc::Rc;

use futures::Future;
use hyper;

use super::request as __internal_request;
use super::{configuration, Error};

pub struct TodoApiClient<C: hyper::client::connect::Connect>
where
    C: Clone + std::marker::Send + Sync + 'static,
{
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> TodoApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> TodoApiClient<C> {
        TodoApiClient { configuration }
    }
}

pub trait TodoApi {
    fn v1_content_asset_upload_url_get(
        &self,
        count: Option<u32>,
    ) -> Pin<Box<dyn Future<Output = Result<Vec<crate::models::PresignedUrlDto>, Error>>>>;
    fn v1_content_assets_delete(
        &self,
        request_body: Vec<String>,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn v1_content_assets_get(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<Vec<crate::models::ContentAssetDto>, Error>>>>;
}

impl<C: hyper::client::connect::Connect> TodoApi for TodoApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    #[allow(unused_mut)]
    fn v1_content_asset_upload_url_get(
        &self,
        count: Option<u32>,
    ) -> Pin<Box<dyn Future<Output = Result<Vec<crate::models::PresignedUrlDto>, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v1/content/asset/upload-url".to_string(),
        )
        .with_auth(__internal_request::Auth::ApiKey(
            __internal_request::ApiKey {
                in_header: true,
                in_query: false,
                param_name: "X-Api-Key".to_owned(),
            },
        ));
        if let Some(ref s) = count {
            let query_value = s.to_string();
            req = req.with_query_param("count".to_string(), query_value);
        }

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn v1_content_assets_delete(
        &self,
        request_body: Vec<String>,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::DELETE,
            "/v1/content/assets".to_string(),
        )
        .with_auth(__internal_request::Auth::ApiKey(
            __internal_request::ApiKey {
                in_header: true,
                in_query: false,
                param_name: "X-Api-Key".to_owned(),
            },
        ));
        req = req.with_body_param(request_body);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn v1_content_assets_get(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<Vec<crate::models::ContentAssetDto>, Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::GET, "/v1/content/assets".to_string())
                .with_auth(__internal_request::Auth::ApiKey(
                    __internal_request::ApiKey {
                        in_header: true,
                        in_query: false,
                        param_name: "X-Api-Key".to_owned(),
                    },
                ));

        req.execute(self.configuration.borrow())
    }
}
